{%- comment -%}
  Files must meet the following requirements:
    https://help.shopify.com/en/manual/shopify-admin/productivity-tools/file-uploads

  # Parameters:
    image_object:       { Object }  | Required  | Image object to render the image from
    aspect_ratio:       { String }  | Optional  | When no value or false is given, defaults to the original image aspect ratio.
                                                  For example: '16/9' or '4/3'
    crop:               { String }  | Optional  | Defaults to 'center'. Set to 'center / top / left / right / bottom' to crop the image with the specified size. Requires both height and width in image_size
    sizes:              { String }  | Optional  | Defaults to '100vw', can be used to get screen widths and load proportional images
                                                  For example: (min-width: 1200px) 600px, 100vw
                                                  Example meaning: 600 pixels from 1200 pixels screen width onwards, fallback for the image is always 100vw
    widths:             { String }  | Optional  | Defaults to value that can be seen below
    max_width           { Integer } | Optional  | Gives the maximum width of the image in 1dpr, for example if it never becomes wider than 300 pixels, prevent loading any bigger sources, keep DOM size small
    lazy:               { Boolean } | Optional  | Defaults to true, set to false to disable lazy loading
    fetchpriority:      { String }  | Optional  | Defaults to null (auto), set to {high|low} to change the loading priority.
                                                  This should only be the case on LCP image. So please DON'T use it on every image that is loaded eagerly.
                                                  When an image is loaded lazily, the fetch priority is automatically set to low.
    alt                 { String }  | Optional  | Set the image alt
    title               { String }  | Optional  | Set the image title
    class               { String }  | Optional  | Set classname(s) for the image
    figcaption          { String }  | Optional  | Set a figure caption
                                                  When you add a picture caption, the <img> is automatically wrapped with a picture tag

  # Figure parameters
    figure_class        { String }  | Optional | Set classname(s) for the figure


  Minimal usage:
    {%- render 'format-image' -%}

  Usage:
  Above the fold (lazyload) usage:
    {%- render 'format-image',
      image_object: section.settings.image,
      lazy: section.settings.lazy,
      sizes: '(min-width: 1200px) 50vw, 100vw'
    -%}

  Fixed aspect ratio usage:
    {%- render 'format-image',
      image_object: section.settings.image,
      aspect_ratio: '16/9',
    -%}

  Using the crop parameter to crop the image from the top:
    {%- render 'format-image',
      image_object: section.settings.image,
      crop: 'top',
      sizes: '(min-width: 1200px) 50vw, 100vw'
    -%}

  Using the lazy parameter to disable lazy loading:
    {%- render 'format-image',
      image_object: section.settings.image,
      lazy: false,
      sizes: '(min-width: 1200px) 50vw, 100vw'
    -%}

  Setting a custom max_width value:
    {%- render 'format-image',
      image_object: section.settings.image,
      max_width: 800,
      sizes: '(min-width: 1200px) 50vw, 100vw'
    -%}

  Adding a figcaption to the image:
    {%- render 'format-image',
      image_object: section.settings.image,
      figcaption: 'This is a caption for the image',
      sizes: '(min-width: 1200px) 50vw, 100vw'
    -%}

  Adding a title and alt text to the image:
    {%- render 'format-image',
      image_object: section.settings.image,
      title: 'This is the title of the image',
      alt: 'This is the alt text for the image',
      sizes: '(min-width: 1200px) 50vw, 100vw'
    -%}

  Setting a custom figure_class for the image:
    {%- render 'format-image',
      image_object: section.settings.image,
      figure_class: 'custom-class',
      sizes: '(min-width: 1200px) 50vw, 100vw'
    -%}
{%- endcomment -%}

{%- liquid
  # Set a maximum size that Shopify allows
  assign shopify_max = 5120

  # Global assigns
  assign height = image_object.height
  assign width = image_object.width

  # If no aspect ratio is specified, calculate it from the image
  unless aspect_ratio
    assign image_ratio = image_object.aspect_ratio
    assign custom_aspect_ratio = false
  else
    # If an aspect ratio is specified, calculate it and add a style to the image tag
    assign aspect_width = aspect_ratio | split: '/' | first | times: 1.0
    assign aspect_height = aspect_ratio | split: '/' | last | times: 1.0
    assign image_ratio = aspect_width | divided_by: aspect_height | round: 3
    assign style = 'aspect-ratio: ' | append: aspect_ratio | append: ';'
    assign custom_aspect_ratio = true
  endunless
-%}

{% capture fallback_image %}
  <div class="svg flex items-center justify-center bg-accent-100 text-accent {{ class -}}" style="{{- style -}}">
    {{- 'image' | placeholder_svg_tag -}}
  </div>
{% endcapture %}

{%- liquid
  # Check if fallback image exists, if not output fallback_image
  unless image_object
    echo fallback_image

    # Break here to avoid impacting page speed
    break
  endunless

  # If max_width is empty, use Shopify max width. If not empty, multiply by 2 to support 2 DPR
  unless max_width
    # If max_width is not defined, use the default Shopify max width
    assign max_width = shopify_max
  else
    # If max_width is defined, double it to support 2 DPR
    assign max_width_times_two = max_width | times: 2
    # Check if the new width is less than or equal to Shopify max width
    if max_width_times_two <= shopify_max
      # If the new width is less than or equal to Shopify max width, use the new width
      assign max_width = max_width | times: 2
    else
      # If the new width is greater than Shopify max width, use the Shopify max width
      assign max_width = shopify_max
    endif
  endunless

  # Set default image widths if none are specified
  unless widths
    assign widths = '320, 360, 375, 400, 420, 480, 520, 640, 768, 840, 960, 1080, 1200, 1280, 1440, 1600, 2048, 2560, 3000, 4000'
  endunless

  # If the max_width is less than 320, create a new array of sizes with that value and that value times 2 to support 2 DPR
  if max_width < 320
    # Double the max_width to support 2 DPR
    assign max_width_times_two = max_width | times: 2
    # Create an array with the original max_width and max_width_times_two
    assign widths = max_width | append: ', ' | append: max_width_times_two
  endif

  # If the width is less than 320, just output that size to avoid errors. 2 times is not possible since the image isn't bigger than this size.
  if width < 320
    # Set the widths to the original width
    assign widths = width

    # Check if there is a max width and if it's lower than the actual image
    if max_width < width
      # Double the max_width to support 2 DPR
      assign max_width_times_two = max_width | times: 2

      # If max_width_times_two is less than or equal to the actual image width, create an array with the original max_width and max_width_times_two
      if max_width_times_two <= width
        assign widths = max_width | append: ', ' | append: max_width_times_two

        # If max_width_times_two is greater than the actual image width, set the widths to the original max_width
      else
        assign widths = max_width
      endif
    endif
  endif

  # Create an array of the image widths
  assign widths_arr = widths | handleize | split: '-'

  # Set default image sizes if not specified
  unless sizes
    assign sizes = '100vw'
  endunless

  # Set default image crop if not specified
  unless 'center,top,bottom,left,right' contains crop
    assign crop = 'center'
  endunless

  # Set fetchpriotiry property
  case fetchpriority
    when 'high'
      assign fetchpriority_value = 'high'

    when 'low'
      assign fetchpriority_value = 'low'

      # If nothing is specified, set the fetchpriority_value to null to let the browser decide
    else
      assign fetchpriority_value = null
  endcase

  # Set lazy loading property
  case lazy
    when false
      assign lazy_value = null
      assign preload = true

    when true
      assign lazy_value = 'lazy'
      assign preload = false
      assign fetchpriority_value = 'low'

      # If nothing is specified, set the attributes to null to let the browser decide
    else
      assign lazy_value = null
      assign preload = null

      # Only set the fetchpriority_value to null if it's not already set to high or low
      if fetchpriority_value == null
        assign fetchpriority_value = null
      endif
  endcase

  # Set default image alt text if not specified
  if alt == blank
    assign alt = image_object.alt | escape

    if alt == blank
      assign alt = 'Image ' | append: image_object.id | escape
    endif
  endif

  # Set default image title text if not specified
  if title == blank
    assign title = image_object.title

    if title == blank
      assign title = 'Image ' | append: image_object.id
    endif
  endif

  # Iterate through the available image widths and calculate the new image dimensions
  for width_item in widths_arr
    assign width_int = width_item | plus: 0

    # Break the loop if the width exceeds the maximum allowed
    if width_int > max_width
      break
    endif

    # Check if the current image width is larger than the current iteration
    if image_object.width >= width_int
      # Add the current image width to the list of new widths
      assign new_widths = new_widths | append: ', ' | append: width_int

      # Calculate the new image URL and dimensions
      assign image_url = image_object | image_url: width: width_int
      assign width = width_int
      assign height = width_int | divided_by: image_ratio | round: 0
    endif
  endfor

  # Remove the first comma and space from the list of new widths
  assign widths = new_widths | remove_first: ', '
-%}

{%- capture image_element -%}
  {%- comment -%}
    The uploaded desktop image with its intrinsic size
    Disabled theme check because it does not recognize the lazy loading options the way we use it
  {%- endcomment -%}
  {% comment %}theme-check-disable AssetUrlFilters{% endcomment %}
  {{
    image_url | image_tag:
      alt: alt,
      class: class,
      crop: crop,
      height: height,
      loading: lazy_value,
      fetchpriority: fetchpriority_value,
      preload: preload,
      sizes: sizes,
      style: style,
      title: title,
      width: width,
      widths: widths,
      data-custom-aspect-ratio: custom_aspect_ratio
  }}
  {% comment %}theme-check-enable AssetUrlFilters{% endcomment %}
{%- endcapture -%}

{%- if figcaption == blank -%}
  {{ image_element }}
{%- else -%}
  <figure
    {% if figure_class != blank %}
      class="{{- figure_class -}}"
    {% endif %}
  >
    {{ image_element }}
    <figcaption>
      {{- figcaption -}}
    </figcaption>
  </figure>
{%- endif -%}
